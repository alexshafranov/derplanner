//
// Copyright (c) 2015 Alexander Shafranov shafranov@gmail.com
//
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
//

#include "derplanner/compiler/io.h"
#include "derplanner/compiler/array.h"
#include "derplanner/compiler/lexer.h"
#include "derplanner/compiler/codegen.h"
#include "derplanner/compiler/id_table.h"
#include "derplanner/compiler/string_buffer.h"
#include "derplanner/compiler/signature_table.h"

using namespace plnnrc;

void plnnrc::init(Codegen& state, ast::Root* tree, Memory* mem)
{
    state.tree = tree;
    state.pool = mem;
}

void plnnrc::destroy(Codegen& /*state*/)
{
}

plnnrc::Codegen::Codegen() : pool(0) {}

plnnrc::Codegen::~Codegen() { destroy(*this); }


void plnnrc::generate_header(Codegen& state, const char* header_guard, Writer* output)
{
    init(state.fmtr, "  ", "\n", output);
    ast::Root* tree = state.tree;
    ast::Domain* domain = tree->domain;
    Formatter& fmtr = state.fmtr;

    Token_Value domain_name = domain->name;
    writeln(fmtr, "// generated by derplanner [http://www.github.com/alexshafranov/derplanner]");
    writeln(fmtr, "#ifndef %s", header_guard);
    writeln(fmtr, "#define %s", header_guard);
    writeln(fmtr, "#pragma once");
    newline(fmtr);
    writeln(fmtr, "#include \"derplanner/runtime/types.h\"");
    newline(fmtr);
    writeln(fmtr, "#ifndef PLNNR_DOMAIN_API");
    writeln(fmtr, "#define PLNNR_DOMAIN_API");
    writeln(fmtr, "#endif");
    newline(fmtr);
    writeln(fmtr, "extern \"C\" PLNNR_DOMAIN_API void %n_init_domain_info();", domain_name);
    writeln(fmtr, "extern \"C\" PLNNR_DOMAIN_API const plnnr::Domain_Info* %n_get_domain_info();", domain_name);
    newline(fmtr);
    writeln(fmtr, "#endif");
    flush(fmtr);
}

static void build_expand_names(String_Buffer& expand_names, ast::Domain* domain)
{
    for (uint32_t task_idx = 0; task_idx < plnnrc::size(domain->tasks); ++task_idx)
    {
        ast::Task* task = domain->tasks[task_idx];
        for (uint32_t case_idx = 0; case_idx < plnnrc::size(task->cases); ++case_idx)
        {
            begin_string(expand_names);
            write(expand_names.buffer, "%n_case_%d", task->name, case_idx);
            end_string(expand_names);
        }
    }
}

static const char* s_runtime_type_tags[] =
{
    #define PLNNR_TYPE(TAG, TYPE) "Type_" #TAG,
    #include "derplanner/runtime/type_tags.inl"
    #undef PLNNR_TYPE
};

static const char* s_runtime_type_name[] =
{
    #define PLNNR_TYPE(TAG, TYPE) #TYPE,
    #include "derplanner/runtime/type_tags.inl"
    #undef PLNNR_TYPE
};

static inline const char* get_runtime_type_tag(Token_Type token_type)
{
    plnnrc_assert(token_type >= (Token_Type)Token_Group_Type_First);
    return s_runtime_type_tags[token_type - Token_Group_Type_First];
}

static inline const char* get_runtime_type_name(Token_Type token_type)
{
    plnnrc_assert(token_type >= (Token_Type)Token_Group_Type_First);
    return s_runtime_type_name[token_type - Token_Group_Type_First];
}

static void generate_precondition(ast::Case* case_, uint32_t case_idx, uint32_t input_idx, Signature input_sig, Signature output_sig, Formatter& fmtr);

void plnnrc::generate_source(Codegen& state, const char* domain_header, Writer* output)
{
    init(state.fmtr, "  ", "\n", output);
    ast::Root* tree = state.tree;
    ast::World* world = tree->world;
    ast::Primitive* prim = tree->primitive;
    ast::Domain* domain = tree->domain;
    Formatter& fmtr = state.fmtr;

    String_Buffer expand_names;
    init(expand_names, state.pool, 64, 4096);

    // includes & pragmas
    {
        writeln(fmtr, "// generated by derplanner [http://www.github.com/alexshafranov/derplanner]");
        writeln(fmtr, "#include \"derplanner/runtime/domain_support.h\"");
        writeln(fmtr, "#include \"%s\"", domain_header);
        newline(fmtr);
        writeln(fmtr, "using namespace plnnr;");
        newline(fmtr);
        writeln(fmtr, "#ifdef __GNUC__");
        writeln(fmtr, "#pragma GCC diagnostic ignored \"-Wunused-parameter\"");
        writeln(fmtr, "#pragma GCC diagnostic ignored \"-Wunused-variable\"");
        writeln(fmtr, "#endif");
        newline(fmtr);
        writeln(fmtr, "#ifdef _MSC_VER");
        writeln(fmtr, "#pragma warning(disable: 4100) // unreferenced formal parameter");
        writeln(fmtr, "#pragma warning(disable: 4189) // local variable is initialized but not referenced");
        writeln(fmtr, "#endif");
        newline(fmtr);
    }

    build_expand_names(expand_names, domain);

    // expand forward declarations
    {
        for (uint32_t case_idx = 0; case_idx < size(expand_names); ++case_idx)
        {
            Token_Value name = get(expand_names, case_idx);
            writeln(fmtr, "static bool %n(Planning_State*, Expansion_Frame*, Fact_Database*);", name);
        }
        newline(fmtr);
    }

    // s_task_expands
    {
        writeln(fmtr, "static Composite_Task_Expand* s_task_expands[] = {");
        for (uint32_t case_idx = 0; case_idx < size(expand_names); ++case_idx)
        {
            Token_Value name = get(expand_names, case_idx);
            Indent_Scope s(fmtr);
            writeln(fmtr, "%n,", name);
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_fact_names
    {
        writeln(fmtr, "static const char* s_fact_names[] = {");
        for (uint32_t fact_idx = 0; fact_idx < size(world->facts); ++fact_idx)
        {
            Indent_Scope s(fmtr);
            ast::Fact* fact = world->facts[fact_idx];
            writeln(fmtr, "\"%n\"", fact->name);
        }
        writeln(fmtr, " };");
        newline(fmtr);
    }

    // fact ids enum
    {
        writeln(fmtr, "enum Fact_Id {");
        for (uint32_t fact_idx = 0; fact_idx < size(world->facts); ++fact_idx)
        {
            Indent_Scope s(fmtr);
            ast::Fact* fact = world->facts[fact_idx];
            writeln(fmtr, "Fact_%n,", fact->name);
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_task_names
    {
        writeln(fmtr, "static const char* s_task_names[] = {");
        // primitive tasks go first.
        for (uint32_t prim_idx = 0; prim_idx < size(prim->tasks); ++prim_idx)
        {
            Indent_Scope s(fmtr);
            ast::Fact* task = prim->tasks[prim_idx];
            writeln(fmtr, "\"%n\"", task->name);
        }
        // composite tasks after.
        for (uint32_t task_idx = 0; task_idx < size(domain->tasks); ++task_idx)
        {
            Indent_Scope s(fmtr);
            ast::Task* task = domain->tasks[task_idx];
            writeln(fmtr, "\"%n\"", task->name);
        }
        writeln(fmtr, " };");
        newline(fmtr);
    }

    // s_fact_types
    {
        writeln(fmtr, "static Fact_Type s_fact_types[] = {");
        for (uint32_t fact_idx = 0; fact_idx < size(world->facts); ++fact_idx)
        {
            ast::Fact* fact = world->facts[fact_idx];
            uint32_t num_params = size(fact->params);
            Indent_Scope s(fmtr);
            write(fmtr, "%i{ %d, {", num_params);
            for (uint32_t param_idx = 0; param_idx < num_params; ++param_idx)
            {
                const char* type_name = get_runtime_type_tag(fact->params[param_idx]->data_type);
                write(fmtr, "%s, ", type_name);
            }
            write(fmtr, "} }");
            newline(fmtr);
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // task parameters & precondition output signatures.
    Signature_Table signatures;
    init(signatures, state.pool, size(domain->tasks) + size(tree->cases));

    // signature table for precondition inputs.
    Signature_Table precond_input_signatures;
    init(precond_input_signatures, state.pool, size(tree->cases));

    // build signatures.
    {
        // primitive task signatures.
        for (uint32_t task_idx = 0; task_idx < size(prim->tasks); ++task_idx)
        {
            ast::Fact* task = prim->tasks[task_idx];

            begin_signature(signatures);
            for (uint32_t param_idx = 0; param_idx < size(task->params); ++param_idx)
            {
                add_param(signatures, task->params[param_idx]->data_type);
            }
            end_signature(signatures);
        }

        // compisite task signatures.
        for (uint32_t task_idx = 0; task_idx < size(domain->tasks); ++task_idx)
        {
            ast::Task* task = domain->tasks[task_idx];

            begin_signature(signatures);
            for (uint32_t param_idx = 0; param_idx < size(task->params); ++param_idx)
            {
                add_param(signatures, task->params[param_idx]->data_type);
            }
            end_signature(signatures);
        }

        // precondition output
        for (uint32_t case_idx = 0; case_idx < size(tree->cases); ++case_idx)
        {
            ast::Case* case_ = tree->cases[case_idx];

            begin_signature(signatures);
            for (uint32_t var_idx = 0; var_idx < size(case_->precond_vars); ++var_idx)
            {
                ast::Var* var = case_->precond_vars[var_idx];
                // skip bound vars
                if (var->definition != 0) { continue; }
                // save types of "output" vars
                add_param(signatures, var->data_type);
            }
            end_signature(signatures);
        }

        // precondition inputs (stored in a separate table)
        for (uint32_t case_idx = 0; case_idx < size(tree->cases); ++case_idx)
        {
            ast::Case* case_ = tree->cases[case_idx];
            ast::Task* task = case_->task;

            begin_signature(precond_input_signatures);
            for (uint32_t param_idx = 0; param_idx < size(task->params); ++param_idx)
            {
                ast::Param* param = task->params[param_idx];
                ast::Var* var = get(case_->precond_var_lookup, param->name);
                if (!var) { continue; }
                add_param(precond_input_signatures, var->data_type);
            }
            end_signature(precond_input_signatures);
        }
    }

    // s_layout_types, s_layout_offsets
    if (size(signatures.types) > 0)
    {
        writeln(fmtr, "static Type s_layout_types[] = {");
        for (uint32_t type_idx = 0; type_idx < size(signatures.types); ++type_idx)
        {
            Token_Type type = signatures.types[type_idx];
            Indent_Scope s(fmtr);
            writeln(fmtr, "%s,", get_runtime_type_tag(type));
        }
        writeln(fmtr, "};");
        newline(fmtr);

        writeln(fmtr, "static size_t s_layout_offsets[%d];", size(signatures.types));
        newline(fmtr);
    }

    // s_task_parameters & s_precond_results.
    {
        struct Format_Param_Layout
        {
            void operator()(Formatter& fmtr, Signature_Table& signatures, uint32_t sig_idx)
            {
                Signature sig = get_sparse(signatures, sig_idx);

                Indent_Scope s(fmtr);
                if (sig.length > 0)
                {
                    writeln(fmtr, "{ %d, s_layout_types + %d, 0, s_layout_offsets + 0 },", sig.length, sig.offset);
                }
                else
                {
                    writeln(fmtr, "{ 0, 0, 0, 0 },");
                }
            }
        };

        const uint32_t num_tasks = size(prim->tasks) + size(domain->tasks);

        writeln(fmtr, "static Param_Layout s_task_parameters[] = {");
        for (uint32_t sig_idx = 0; sig_idx < num_tasks; ++sig_idx)
        {
            Format_Param_Layout()(fmtr, signatures, sig_idx);
        }
        writeln(fmtr, "};");
        newline(fmtr);

        writeln(fmtr, "static Param_Layout s_precond_results[] = {");
        for (uint32_t sig_idx = num_tasks; sig_idx < size(signatures.remap); ++sig_idx)
        {
            Format_Param_Layout()(fmtr, signatures, sig_idx);
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_num_cases
    {
        writeln(fmtr, "static uint32_t s_num_cases[] = {");
        for (uint32_t task_idx = 0; task_idx < size(domain->tasks); ++task_idx)
        {
            ast::Task* task = domain->tasks[task_idx];
            Indent_Scope s(fmtr);
            writeln(fmtr, "%d, ", size(task->cases));
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_size_hints
    {
        writeln(fmtr, "static uint32_t s_size_hints[] = {");
        for (uint32_t fact_idx = 0; fact_idx < size(world->facts); ++fact_idx)
        {
            Indent_Scope s(fmtr);
            writeln(fmtr, "0, ");
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_hashes
    {
        writeln(fmtr, "static uint32_t s_hashes[] = {");
        for (uint32_t fact_idx = 0; fact_idx < size(world->facts); ++fact_idx)
        {
            Indent_Scope s(fmtr);
            writeln(fmtr, "0, ");
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // s_domain_info
    {
        const uint32_t num_tasks = size(prim->tasks) + size(domain->tasks);
        const uint32_t num_primitive = size(prim->tasks);
        const uint32_t num_composite = size(domain->tasks);
        writeln(fmtr, "static Domain_Info s_domain_info = {");
        {
            Indent_Scope s(fmtr);
            // task_info
            writeln(fmtr, "{ %d, %d, %d, s_num_cases, 0, s_task_names, s_task_parameters, s_precond_results, s_task_expands },", num_tasks, num_primitive, num_composite);
            // database_req
            writeln(fmtr, "{ %d, s_size_hints, s_fact_types, s_hashes, s_fact_names },", size(world->facts));
        }
        writeln(fmtr, "};");
        newline(fmtr);
    }

    // init_domain_info & get_domain_info
    {
        writeln(fmtr, "void %n_init_domain_info()", domain->name);
        writeln(fmtr, "{");
        {
            Indent_Scope s(fmtr);
            writeln(fmtr, "for (size_t i = 0; i < plnnr_static_array_size(s_task_parameters); ++i) {");
            {
                Indent_Scope s(fmtr);
                writeln(fmtr, "compute_offsets_and_size(s_task_parameters[i]);");
            }
            writeln(fmtr, "}");
            newline(fmtr);

            writeln(fmtr, "for (size_t i = 0; i < plnnr_static_array_size(s_precond_results); ++i) {");
            {
                Indent_Scope s(fmtr);
                writeln(fmtr, "compute_offsets_and_size(s_precond_results[i]);");
            }
            writeln(fmtr, "}");
        }
        writeln(fmtr, "}");
        newline(fmtr);

        writeln(fmtr, "const Domain_Info* %n_get_domain_info() { return &s_domain_info; }", domain->name);
        newline(fmtr);
    }

    // precondition input structs
    {
        for (uint32_t input_idx = 0; input_idx < size_dense(precond_input_signatures); ++input_idx)
        {
            Signature input_sig = get_dense(precond_input_signatures, input_idx);
            if (input_sig.length == 0) { continue; }

            writeln(fmtr, "struct input_%d {", input_idx);
            for (uint32_t param_idx = 0; param_idx < input_sig.length; ++param_idx)
            {
                Indent_Scope s(fmtr);
                Token_Type param_type = input_sig.types[param_idx];
                const char* type_name = get_runtime_type_name(param_type);
                writeln(fmtr, "%s _%d;", type_name, param_idx);
            }
            writeln(fmtr, "};");
            newline(fmtr);
        }
    }

    // precondition iterators
    for (uint32_t case_idx = 0; case_idx < size(tree->cases); ++case_idx)
    {
        ast::Case* case_ = tree->cases[case_idx];
        Signature input_sig = get_sparse(precond_input_signatures, case_idx);
        Signature output_sig = get_sparse(signatures, size(domain->tasks) + size(prim->tasks) + case_idx);
        uint32_t input_idx = get_dense_index(precond_input_signatures, case_idx);
        generate_precondition(case_, case_idx, input_idx, input_sig, output_sig, fmtr);
    }

    flush(fmtr);
}

static void generate_precondition(ast::Case* case_, uint32_t case_idx, uint32_t input_idx, Signature input_sig, Signature output_sig, Formatter& fmtr)
{
    if (input_sig.length > 0)
    {
        writeln(fmtr, "static bool p%d_next(Planning_State* state, Expansion_Frame* frame, Fact_Database* db, const input_%d* args)", case_idx, input_idx);
    }
    else
    {
        writeln(fmtr, "static bool p%d_next(Planning_State* state, Expansion_Frame* frame, Fact_Database* db)", case_idx);
    }

    writeln(fmtr, "{");
    {
        Indent_Scope s(fmtr);
        writeln(fmtr, "Fact_Handle* handles = frame->handles;");
        newline(fmtr);
        writeln(fmtr, "plnnr_coroutine_begin(frame, precond_label);");

        const uint32_t num_fact_handles = size(case_->precond_facts);
        if (num_fact_handles > 0)
        {
            writeln(fmtr, "handles = allocate_precond_handles(state, frame, %d);", num_fact_handles);
        }

        if (output_sig.length > 0)
        {
            writeln(fmtr, "allocate_precond_result(state, frame, s_precond_results[%d]);", case_idx);
        }

        newline(fmtr);
    }
    writeln(fmtr, "}");
    newline(fmtr);
}
